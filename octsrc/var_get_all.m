function [outp] = var_get_all(par,vr,step,verbose)
% Generates all parameters combinations as initialized by var_init().
%
% This is original slower version of the 'var_get_all_fast()' function,
% but it can also variate sub-structure elements.
% Other behaviour is the same, so also see help of 'var_get_all_fast()'.
%
% usage:
%  [outp] = var_get_all(par,vr)
%  [outp] = var_get_all(par,vr,step)
%  [outp] = var_get_all(par,vr,step,verbose)
%
% params:
%  par - simulation parameters structure
%  vr - session generated by var_init()
%  step - how many combinations generate at once? (default: 10)
%  verbose - show progress? (default: false)
%
% Returns:
%  outp - cell array of varied par structure parameters (each cell
%         is one combination), all vector parameters are reduced
%         to scalars. 
%
% License:
% --------
% This is part of VAR library for automatic multidim. variation of simulation parameters.
% (c) 2018-2023, Stanislav Maslan, s.maslan@seznam.cz
% The script is distributed under MIT license, https://opensource.org/licenses/MIT 

    if ~exist('verbose','var')
        verbose = false;
    end
    if verbose
      printf('Generating parameter combinations ... \r');
    end
    
    if ~exist('step','var')
        step = 10;
    end 
        
    if ~vr.var_par_cnt
        % in case of no variation
        outp = {par};
        
        if verbose
            printf('\n');
        end
        return;
    end
    
    % get first combination
    [p,vr] = var_get_next(par,vr);
      
    % allocate full buffer
    outp = repmat(p,vr.var_n,1);
   
    if(vr.var_n>1)
        % generate rest of the combinations
        k = 2;
        da_end = 0;
        while(~da_end)
            % generate chunk
            pl = min(step,vr.var_n-k+1);
            [outp(k:k+pl-1),vr,da_end] = var_get_next(par,vr,step);
            k += pl;
            
            if verbose
                printf('Generating parameter combinations ... %3.0f%%  \r',100*outp(k-1).pvpid/outp(k-1).pvpcnt);
            end       
        end
            
    end
    
    if verbose
        printf('\n');
    end
      
    % convert to cells
    outp = num2cell(outp);

end
